<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Blog</title>
    <link>https://fuchunlan.github.io/</link>
    <description>Recent content on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 21 May 2021 14:41:13 +0800</lastBuildDate><atom:link href="https://fuchunlan.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端小白工作记录之提供 docker image</title>
      <link>https://fuchunlan.github.io/docker/</link>
      <pubDate>Wed, 16 Jun 2021 16:07:39 +0800</pubDate>
      
      <guid>https://fuchunlan.github.io/docker/</guid>
      <description>​	Why need docker image?  这两天工作遇到一个新的问题，向开源项目提PR之后，issue 的提出者对我说作为一个对后端一窍不用的前端小白，看到这个问题，我不禁疑惑了，嗯？？？我不是在PR里面提供了视频吗？
 然后我很愚蠢的重新贴上了界面演示的image😂
 之后我收到了一条新的回复，他说  好的，现在终于引入正题了——
What is docker image? 首先我只知道docker 是后端知识😓，这个时候就应该赶紧问懂的人了~
询问了mentor，他给我的解释是：
 前端项目打包之后的代码部署成一个docker 镜像
 为了以防显得自己什么都不知道，并且还没有点学习能力，我开始了面向百度编程，下面就说说，作为前端需要知道的docker 的部分内容，如果你也和我一样的情况，那么请观看下面的内容，但如果你需要更多的，请搜索🔍更专业的人士的文章~
How to get docker image? 第一步：安装docker docker安装非常小白，下一步即可，这里我就只附上官网连接，记得注册一个账号并登录
第二步：打包项目 每个项目打包项目的命令大同小异，最简单直白的做法是，查看package.json文件中script显示的命令，一般是
npm build / yarn build 第三步：创建镜像文件 在根目录创建Dockerfile文件，至于文件里的内容，本人技术过于浅薄不敢妄言（ps：其实是因为公司的项目本身Dockerfile就已经配置好了，不需要我进行修改，等我学术更精的时候我会好好学一学）
第四步：构建镜像 docker build -t 镜像名称 . // 记住这个 . 不能遗漏 第五步：推送镜像到Docker Hub docker push 镜像名称  这里很多人会发现自己遇到了一个新问题
终端中报错 denied: requested access to the resource is denied
 这个问题其实百度一下就很好解决了，镜像名称应该是由你的docker用户名/镜像名称组成，</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://fuchunlan.github.io/about/</link>
      <pubDate>Fri, 21 May 2021 14:42:49 +0800</pubDate>
      
      <guid>https://fuchunlan.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>基于向开源项目提PR的常见git操作</title>
      <link>https://fuchunlan.github.io/post/git/</link>
      <pubDate>Fri, 21 May 2021 14:41:13 +0800</pubDate>
      
      <guid>https://fuchunlan.github.io/post/git/</guid>
      <description>引言 作为一个初入职场的程序员👨🏻‍💻，想必大家都会面临的一个问题就是如何提交代码，Git操作说难也难，说易也易，面向百度也能搜出各式各样的教程，而笔者依然选择写一篇，当然是因为笔者发现在工作中用到的和网上现有的教程存在一些差异。
(Ps:可能有些小白也和当初的我一样并不知道PR是什么~，这里解答一下，就是Pull Request)
准备工作  首先你的电脑需要能够可以输入git命令（即：安装Git）Git安装地址  检查是否电脑是否安装Git： 在终端输入 git version   理解Git 的工作区、暂存区、仓库区、远程仓库  工作区：即本地代码所存放的地方（电脑磁盘中） 暂存区：临时存放改动的文件的区域 仓库区：存放了所有版本的数据 远程仓库：即github、gitlab、gitee等代码托管平台    fork 曾经使用gitlab作为远程仓库时，只需要直接clone即可，现在需要使用了github向开源项目提交pr之后，发现第一步是fork
  在github中找到想参与的开源项目，例如KubeSphere
  点击右上角 Fork按钮  点开自己的github账号，发现自己的仓库中多了一个KubeSphere
  进入当该项目中，点击Clone or download,然后复制https链接
  clone 打开终端进入一个你想存放代码的目录然后执行如下操作👇🏻
git clone https://github.com/***/***.git // 后面的链接就是上一步骤中赋值的链接🔗 // 此时在master主分支   与上游分支建立连接
  此时使用git remote -v可发现只与自己仓库建立连接，还需要与上游建立连接，这样才能将自己仓库中的项目的更改提交到开源项目中（只有origin 开头的两行代码）
git remote add upstream [url] // 这里的url为 开源项目的https url，例如https://github.com/kubesphere/kubesphere.git， 创建连接后可再次输入git remote -v发现多了upstream 开头的两行</description>
    </item>
    
  </channel>
</rss>
